// Code generated by MockGen. DO NOT EDIT.
// Source: internal/authmiddleware/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/authmiddleware/auth.go -destination=mocks/authmiddleware/auth.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/SapolovichSV/backprogeng/internal/user/entities"
	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
	isgomock struct{}
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockauthService) Auth(c echo.Context) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", c)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockauthServiceMockRecorder) Auth(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockauthService)(nil).Auth), c)
}

// Login mocks base method.
func (m *MockauthService) Login(c echo.Context) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockauthServiceMockRecorder) Login(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockauthService)(nil).Login), c)
}

// Register mocks base method.
func (m *MockauthService) Register(c echo.Context, user entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockauthServiceMockRecorder) Register(c, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockauthService)(nil).Register), c, user)
}
