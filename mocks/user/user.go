// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/model/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/model/user.go -destination=mocks/user/user.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/SapolovichSV/backprogeng/internal/user/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockuserModel is a mock of userModel interface.
type MockuserModel struct {
	ctrl     *gomock.Controller
	recorder *MockuserModelMockRecorder
	isgomock struct{}
}

// MockuserModelMockRecorder is the mock recorder for MockuserModel.
type MockuserModelMockRecorder struct {
	mock *MockuserModel
}

// NewMockuserModel creates a new mock instance.
func NewMockuserModel(ctrl *gomock.Controller) *MockuserModel {
	mock := &MockuserModel{ctrl: ctrl}
	mock.recorder = &MockuserModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserModel) EXPECT() *MockuserModelMockRecorder {
	return m.recorder
}

// AddFav mocks base method.
func (m *MockuserModel) AddFav(ctx context.Context, drinkName string, useriD int) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFav", ctx, drinkName, useriD)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFav indicates an expected call of AddFav.
func (mr *MockuserModelMockRecorder) AddFav(ctx, drinkName, useriD any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFav", reflect.TypeOf((*MockuserModel)(nil).AddFav), ctx, drinkName, useriD)
}

// CreateUser mocks base method.
func (m *MockuserModel) CreateUser(ctx context.Context, user entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockuserModelMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockuserModel)(nil).CreateUser), ctx, user)
}

// UserByID mocks base method.
func (m *MockuserModel) UserByID(ctx context.Context, id int) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", ctx, id)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockuserModelMockRecorder) UserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockuserModel)(nil).UserByID), ctx, id)
}
