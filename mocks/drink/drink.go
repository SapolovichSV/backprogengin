// Code generated by MockGen. DO NOT EDIT.
// Source: internal/drink/model/drink.go
//
// Generated by this command:
//
//	mockgen -source=internal/drink/model/drink.go -destination=mocks/drink/drink.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/SapolovichSV/backprogeng/internal/drink/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockDrinkModel is a mock of DrinkModel interface.
type MockDrinkModel struct {
	ctrl     *gomock.Controller
	recorder *MockDrinkModelMockRecorder
	isgomock struct{}
}

// MockDrinkModelMockRecorder is the mock recorder for MockDrinkModel.
type MockDrinkModelMockRecorder struct {
	mock *MockDrinkModel
}

// NewMockDrinkModel creates a new mock instance.
func NewMockDrinkModel(ctrl *gomock.Controller) *MockDrinkModel {
	mock := &MockDrinkModel{ctrl: ctrl}
	mock.recorder = &MockDrinkModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrinkModel) EXPECT() *MockDrinkModelMockRecorder {
	return m.recorder
}

// AllDrinks mocks base method.
func (m *MockDrinkModel) AllDrinks(ctx context.Context, id int) ([]entities.Drink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDrinks", ctx, id)
	ret0, _ := ret[0].([]entities.Drink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllDrinks indicates an expected call of AllDrinks.
func (mr *MockDrinkModelMockRecorder) AllDrinks(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDrinks", reflect.TypeOf((*MockDrinkModel)(nil).AllDrinks), ctx, id)
}

// CreateDrink mocks base method.
func (m *MockDrinkModel) CreateDrink(ctx context.Context, dCont entities.Drink) (entities.Drink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDrink", ctx, dCont)
	ret0, _ := ret[0].(entities.Drink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDrink indicates an expected call of CreateDrink.
func (mr *MockDrinkModelMockRecorder) CreateDrink(ctx, dCont any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDrink", reflect.TypeOf((*MockDrinkModel)(nil).CreateDrink), ctx, dCont)
}

// DeleteDrink mocks base method.
func (m *MockDrinkModel) DeleteDrink(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDrink", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDrink indicates an expected call of DeleteDrink.
func (mr *MockDrinkModelMockRecorder) DeleteDrink(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDrink", reflect.TypeOf((*MockDrinkModel)(nil).DeleteDrink), ctx, name)
}

// DrinkByName mocks base method.
func (m *MockDrinkModel) DrinkByName(ctx context.Context, name string) (entities.Drink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrinkByName", ctx, name)
	ret0, _ := ret[0].(entities.Drink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrinkByName indicates an expected call of DrinkByName.
func (mr *MockDrinkModelMockRecorder) DrinkByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrinkByName", reflect.TypeOf((*MockDrinkModel)(nil).DrinkByName), ctx, name)
}

// DrinksByTags mocks base method.
func (m *MockDrinkModel) DrinksByTags(ctx context.Context, tagsCont []string) ([]entities.Drink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrinksByTags", ctx, tagsCont)
	ret0, _ := ret[0].([]entities.Drink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrinksByTags indicates an expected call of DrinksByTags.
func (mr *MockDrinkModelMockRecorder) DrinksByTags(ctx, tagsCont any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrinksByTags", reflect.TypeOf((*MockDrinkModel)(nil).DrinksByTags), ctx, tagsCont)
}

// UpdateDrink mocks base method.
func (m *MockDrinkModel) UpdateDrink(ctx context.Context, dCont entities.Drink) (entities.Drink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDrink", ctx, dCont)
	ret0, _ := ret[0].(entities.Drink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDrink indicates an expected call of UpdateDrink.
func (mr *MockDrinkModelMockRecorder) UpdateDrink(ctx, dCont any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDrink", reflect.TypeOf((*MockDrinkModel)(nil).UpdateDrink), ctx, dCont)
}
